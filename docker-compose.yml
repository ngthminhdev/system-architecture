version: '3'

services:

  backend_1:
    container_name: backend_1
    ports:
      - "3001:3000"
    build: 
      context: ./backend_1
      dockerfile: Dockerfile
    volumes:
      - ./backend_1:/services/app
    networks:
      - system_network

  backend_2:
    container_name: backend_2
    ports:
      - "3002:3000"
    build: 
      context: ./backend_2
      dockerfile: Dockerfile
    volumes:
      - ./backend_2:/services/app
    networks:
      - system_network

  backend_3:
    container_name: backend_3
    ports:
      - "3003:3000"
    build: 
      context: ./backend_3
      dockerfile: Dockerfile
    volumes:
      - ./backend_3:/services/app
    networks:
      - system_network

  # backend_4:
  #   container_name: backend_4
  #   ports:
  #     - "3004:3000"
  #   build: 
  #     context: ./backend_4
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend_4:/services/app
  #   networks:
  #     - system_network

  # backend_5:
  #   container_name: backend_5
  #   ports:
  #     - "3005:3000"
  #   build: 
  #     context: ./backend_5
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend_5:/services/app
  #   networks:
  #     - system_network

  udp:
    container_name: udp
    ports:
      - "3006:3000"
    build: 
      context: ./udp
      dockerfile: Dockerfile
    volumes:
      - ./udp:/services/app
    networks:
      - system_network

  queue:
    container_name: queue
    ports:
      - "3007:3000"
    build: 
      context: ./queue
      dockerfile: Dockerfile
    volumes:
      - ./queue:/services/app
    networks:
      - system_network
    # depends_on:
    #   kafka:
    #     condition: service_healthy

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - system_network

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
    networks:
      - system_network
    # healthcheck:
    #   test: ["CMD", "bash", "-c", "unset JMX_PORT; kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 40s

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9090:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
    networks:
      - system_network
    # depends_on:
    #   kafka:
    #     condition: service_healthy



networks:
  system_network: