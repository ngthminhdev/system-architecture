version: '3'

services:

  backend_1:
    container_name: backend_1
    ports:
      - "3001:3000"
    build: 
      context: ./backend_1
      dockerfile: Dockerfile
    volumes:
      - ./backend_1:/services/app
    networks:
      - system_network

  backend_2:
    container_name: backend_2
    ports:
      - "3002:3000"
    build: 
      context: ./backend_2
      dockerfile: Dockerfile
    volumes:
      - ./backend_2:/services/app
    networks:
      - system_network

  backend_3:
    container_name: backend_3
    ports:
      - "3003:3000"
    build: 
      context: ./backend_3
      dockerfile: Dockerfile
    volumes:
      - ./backend_3:/services/app
    networks:
      - system_network

  # backend_4:
  #   container_name: backend_4
  #   ports:
  #     - "3004:3000"
  #   build: 
  #     context: ./backend_4
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend_4:/services/app
  #   networks:
  #     - system_network

  # backend_5:
  #   container_name: backend_5
  #   ports:
  #     - "3005:3000"
  #   build: 
  #     context: ./backend_5
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend_5:/services/app
  #   networks:
  #     - system_network

  # udp:
  #   container_name: udp
  #   ports:
  #     - "3006:3000"
  #   build: 
  #     context: ./udp
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./udp:/services/app
  #   networks:
  #     - system_network

  log_processor:
    container_name: log_processor
    ports:
      - "3007:3000"
      - "514:514"
    build: 
      context: ./queue
      dockerfile: Dockerfile
    volumes:
      - ./queue:/services/app
    networks:
      - system_network
    # depends_on:
    #   kafka:
    #     condition: service_healthy

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - system_network

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
    networks:
      - system_network
    # healthcheck:
    #   test: ["CMD", "bash", "-c", "unset JMX_PORT; kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 40s

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui 
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      SERVER_SERVLET_CONTEXTPATH: "/"
    networks:
      - system_network

  # jaeger:
  #   container_name: jaeger
  #   image: jaegertracing/all-in-one:1.30
  #   ports:
  #     - "5775:5775/udp"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "5778:5778"
  #     - "16686:16686"
  #     - "14268:14268"
  #     - "14250:14250"
  #     - "9411:9411"
  #   environment:
  #     - SPAN_STORAGE_TYPE=elasticsearch
  #     - ES_SERVER_URLS=http://elasticsearch:9200
  #     - LOG_LEVEL=debug
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   networks:
  #     - system_network

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - system_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - esdata:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.14.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - system_network


networks:
  system_network:
  
volumes:
  esdata: